{"task": "reachable", "language": "python-functional", "plan": {"edge_match": [{"line": 6, "start": 6, "end": 33}], "edge_sequence": [{"line": 5, "start": 6, "end": 23}], "vertices": [{"line": 10, "start": 2, "end": 16}, {"line": 11, "start": 4, "end": 15}, {"line": 12, "start": 4, "end": 43}, {"line": 15, "start": 14, "end": 22}, {"line": 8, "start": 4, "end": 34}, {"line": 3, "start": 6, "end": 20}, {"line": 4, "start": 6, "end": 27}, {"line": 2, "start": 4, "end": 20}], "source": [{"line": 14, "start": 2, "end": 29}, {"line": 15, "start": 24, "end": 37}]}, "source": "def reachable(graph, query):\n  def step(visited):\n    frontier = set([\n      edge[\"target\"]\n      for vertex in visited\n      for edge in graph\n      if vertex == edge[\"source\"]\n    ])\n    return frontier.union(visited)\n\n  def fix(f, x):\n    next = f(x)\n    return x if next == x else fix(f, next)\n\n  source = query[0][\"source\"]\n  return list(fix(step, set([source])))", "author": "scott", "implementation": ""}