{"task": "reachable", "language": "python-imperative", "plan": {"step": [{"line": 13, "start": 0, "end": 48}, {"line": 14, "start": 12, "end": 34}, {"line": 15, "start": 8, "end": 28}, {"line": 6, "start": 4, "end": 19}], "halt": [{"line": 7, "start": 4, "end": 28}, {"line": 9, "start": 4, "end": 28}, {"line": 11, "start": 8, "end": 30}, {"line": 12, "start": 12, "end": 20}], "source": [{"line": 7, "start": 20, "end": 26}, {"line": 4, "start": 4, "end": 31}]}, "source": "def reachable(graph, query):\n    adjacency_list = defaultdict(list)\n    for edge in graph:\n        adjacency_list[edge[\"source\"]].append(edge[\"target\"])\n    source = query[0][\"source\"]\n    \n    visited = set()\n    to_visit = set([source])\n    \n    while len(to_visit) > 0:\n        current = to_visit.pop()\n        if current in visited:\n            continue\n        for neighbor in adjacency_list[current]:\n            to_visit.add(neighbor)\n        visited.add(current)\n            \n    return list(visited)", "author": "scott", "implementation": ""}