{"task": "strings_to_numbers", "language": "datalog", "plan": {"number": [{"line": 13, "start": 2, "end": 22}], "cond": [{"line": 6, "start": 2, "end": 37}, {"line": 7, "start": 3, "end": 38}, {"line": 1, "start": 0, "end": 28}], "clean": [{"line": 2, "start": 0, "end": 32}, {"line": 3, "start": 2, "end": 34}, {"line": 4, "start": 2, "end": 19}, {"line": 5, "start": 2, "end": 26}, {"line": 8, "start": 2, "end": 33}, {"line": 9, "start": 3, "end": 44}, {"line": 12, "start": 2, "end": 40}, {"line": 0, "start": 0, "end": 62}], "iter": [{"line": 1, "start": 29, "end": 50}]}, "source": ".decl clean(Format:symbol, Inp:symbol, I:number, Outp:symbol) \nclean(Format, Inp, 0, \"\") :- numbers(Format, Inp).\nclean(Format, Inp, I+1, Outp) :-\n  clean(Format, Inp, I, Outp_rec),\n  I <= strlen(Inp),\n  Chr = substr(Inp, I, 1),\n  ((Format = \"comma_sep\", Sep = \",\");\n   (Format = \"under_sep\", Sep = \"_\")),\n  ((Chr  = Sep, Outp = Outp_rec);\n   (Chr != Sep, Outp = cat(Outp_rec, Chr))).\n\nstrings_to_numbers(N) :-\n  clean(Format, Inp, strlen(Inp), Outp),\n  N = to_number(Outp).", "author": "will", "implementation": ""}