{"task": "scc", "language": "sql", "plan": {"vertices": [{"line": 1, "start": 0, "end": 23}, {"line": 4, "start": 2, "end": 33}, {"line": 9, "start": 2, "end": 33}], "edge_sequence": [{"line": 2, "start": 2, "end": 43}, {"line": 5, "start": 2, "end": 41}], "edge_match": [{"line": 6, "start": 2, "end": 30}], "source<->target": [{"line": 10, "start": 2, "end": 44}, {"line": 11, "start": 2, "end": 62}, {"line": 14, "start": 0, "end": 33}, {"line": 13, "start": 0, "end": 31}]}, "source": "WITH RECURSIVE\nclosure(source, target) AS (\n  SELECT DISTINCT source, target FROM graph\n  UNION\n  SELECT edge.source, path.target\n  FROM closure as path JOIN graph as edge\n  ON edge.target = path.source\n),\ncomponent(v1, v2) AS (\n  SELECT path.source, path.target\n  FROM closure as path JOIN closure as path_\n  ON path.source = path_.target AND path.target = path_.source\n)\nSELECT S.v2 FROM component as S\nJOIN query ON S.v1 = query.source", "author": "scott", "implementation": ""}