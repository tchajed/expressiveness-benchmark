{"task": "scc", "language": "python-imperative", "plan": {"graph": [{"line": 2, "start": 2, "end": 18}, {"line": 5, "start": 4, "end": 32}, {"line": 6, "start": 4, "end": 32}, {"line": 3, "start": 2, "end": 20}, {"line": 4, "start": 4, "end": 51}, {"line": 18, "start": 2, "end": 25}], "source<->target": [{"line": 19, "start": 4, "end": 41}, {"line": 20, "start": 8, "end": 39}, {"line": 16, "start": 2, "end": 29}, {"line": 17, "start": 2, "end": 13}, {"line": 22, "start": 2, "end": 15}, {"line": 21, "start": 6, "end": 27}], "vertices": [{"line": 1, "start": 2, "end": 19}, {"line": 12, "start": 8, "end": 53}, {"line": 13, "start": 12, "end": 55}, {"line": 14, "start": 10, "end": 24}, {"line": 15, "start": 10, "end": 49}, {"line": 8, "start": 2, "end": 16}, {"line": 9, "start": 4, "end": 19}, {"line": 21, "start": 9, "end": 9}, {"line": 7, "start": 0, "end": 16}], "edge_sequence": [{"line": 10, "start": 4, "end": 22}, {"line": 11, "start": 6, "end": 29}]}, "source": "def scc(graph, query):\n  reachable = set()\n  vertices = set()\n  for edge in graph:\n    reachable.add((edge[\"source\"], edge[\"target\"]))\n    vertices.add(edge[\"source\"])\n    vertices.add(edge[\"target\"])\n  changed = True\n  while changed:\n    changed = False\n    for edge in graph:\n      for vertex in vertices:\n        if ((edge[\"source\"], vertex) not in reachable\n            and (edge[\"target\"], vertex) in reachable):\n          changed = True\n          reachable.add((edge[\"source\"], vertex))\n  source = query[0][\"source\"]\n  result = []\n  for vertex in vertices:\n    if ((source, vertex) in reachable and\n        (vertex, source) in reachable):\n      result.append(vertex)\n  return result", "author": "scott", "implementation": ""}