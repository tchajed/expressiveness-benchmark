{"task": "scc", "language": "python-functional", "plan": {"source<->target": [{"line": 13, "start": 4, "end": 31}, {"line": 16, "start": 4, "end": 46}, {"line": 17, "start": 6, "end": 65}], "edge_sequence": [{"line": 4, "start": 12, "end": 44}, {"line": 5, "start": 12, "end": 29}], "edge_match": [{"line": 6, "start": 12, "end": 39}], "vertices": [{"line": 1, "start": 4, "end": 23}, {"line": 2, "start": 8, "end": 20}, {"line": 3, "start": 12, "end": 36}, {"line": 9, "start": 4, "end": 18}, {"line": 10, "start": 8, "end": 19}, {"line": 11, "start": 8, "end": 47}, {"line": 15, "start": 4, "end": 31}, {"line": 7, "start": 8, "end": 26}], "graph": [{"line": 14, "start": 4, "end": 68}]}, "source": "def scc(graph, query):\n    def step(relation):\n        return set([\n            (source, edge[\"target\"])\n            for (source, target) in relation\n            for edge in graph\n            if target == edge[\"source\"]\n        ]).union(relation)\n\n    def fix(f, x):\n        next = f(x)\n        return x if next == x else fix(f, next)\n\n    source = query[0][\"source\"]\n    init = set([(edge[\"source\"], edge[\"target\"]) for edge in graph])\n    reachable = fix(step, init)\n    return list(set([v for (_, v) in reachable\n      if (v, source) in reachable and (source, v) in reachable]))", "author": "scott", "implementation": ""}