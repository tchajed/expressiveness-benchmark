[{"id": "youngest_over_35", "category": "Aggregation", "name": "Youngest person over 35", "description": "Find the name of the youngest person older than 35, returning null if none exists.", "plan": [{"id": "filter", "description": "older than 35"}, {"id": "min", "description": "youngest person"}, {"id": "name", "description": "the name"}, {"id": "null", "description": "returning null"}], "sample_input": {"people": [{"age": 35, "name": "John"}, {"age": 36, "name": "Mary"}, {"age": 37, "name": "Jane"}]}, "sample_output": "Mary"}, {"id": "strings_to_numbers", "category": "Strings", "name": "Convert strings with different formats to numbers", "description": "Convert the string value in each row into a number, removing commas if format is \"comma_sep\" and underscores if format is \"under_sep\".", "plan": [{"id": "iter", "description": "in each row"}, {"id": "cond", "description": "commas if format is \"comma_sep\" and underscores if format is \"under_sep\"."}, {"id": "clean", "description": "removing"}, {"id": "number", "description": "into a number"}], "sample_input": {"numbers": [{"format": "comma_sep", "value": "12,337,800"}, {"format": "under_sep", "value": "80_999"}]}, "sample_output": [12337800, 80999]}, {"id": "continent_by_population", "category": "Aggregation", "name": "Continent with the highest average population", "description": "Find the name of the continent with the highest average population by country.", "plan": [{"id": "name", "description": "name of the continent"}, {"id": "group", "description": "by country"}, {"id": "average", "description": "average population"}, {"id": "max", "description": "highest"}], "sample_input": {"countries": [{"name": "USA", "population": 328, "continent": "North America"}, {"name": "Canada", "population": 37, "continent": "North America"}, {"name": "Ethiopia", "population": 109, "continent": "Africa"}, {"name": "Kenya", "population": 51, "continent": "Africa"}]}, "sample_output": "North America"}, {"id": "process_tweets", "category": "Strings", "name": "Filter and clean tweets", "description": "Select the lower-case body and timestamp of tweets that are in English and not retweets", "plan": [{"id": "filter", "description": "in English and not retweets"}, {"id": "lowercase", "description": "lower-case"}, {"id": "select", "description": "body and timestamp"}, {"id": "iter", "description": "of tweets"}], "sample_input": {"data": [{"language": "en", "is_retweet": "false", "likes": 8, "body": "Some Text", "ts": 1604534320}, {"language": "en", "is_retweet": "true", "likes": 8, "body": "some Text", "ts": 1604534321}, {"language": "en", "is_retweet": "false", "likes": 8, "body": "some Text", "ts": 1604534322}, {"language": "fr", "is_retweet": "false", "likes": 8, "body": "some Text", "ts": 1604534322}]}, "sample_output": [{"body": "some text", "ts": 1604534320}, {"body": "some text", "ts": 1604534322}]}, {"id": "average_window", "category": "Time Series", "name": "Windowed average", "description": "compute average of data points in each disjoint time window of width 7 ordered by time", "plan": [{"id": "key", "description": "of width 7"}, {"id": "group by", "description": "points in each disjoint time window"}, {"id": "average", "description": "compute average"}, {"id": "output_order", "description": "ordered by time"}], "sample_input": {"data": [{"time": 20, "x": 14.0}, {"time": 19, "x": 15.0}, {"time": 2, "x": 3.0}, {"time": 1, "x": 2.0}, {"time": 3, "x": 7.0}, {"time": 10, "x": 9.0}, {"time": 11, "x": 11.0}]}, "sample_output": [4.0, 10.0, 14.5]}, {"id": "unique_product", "category": "First-order logic", "name": "Unique product", "description": "Find the name of any product whose value is different from all others", "plan": [{"id": "name", "description": "Find the name"}, {"id": "check", "description": "value is different from all others"}], "sample_input": {"list": [{"id": 0, "value": "Apple"}, {"id": 1, "value": "Banana"}, {"id": 2, "value": "Banana"}, {"id": 3, "value": "Banana"}]}, "sample_output": "Apple"}, {"id": "average_adjacent", "category": "Time Series", "name": "Adjacent averages", "description": "compute averages of adjacent values in time-ordered data", "plan": [{"id": "order", "description": "time-ordered data"}, {"id": "pair adjacent", "description": "adjacent values"}, {"id": "average", "description": "compute averages"}], "sample_input": {"data": [{"time": 6, "x": 14.0}, {"time": 2, "x": 3.0}, {"time": 1, "x": 1.0}, {"time": 3, "x": 7.0}, {"time": 4, "x": 9.0}, {"time": 5, "x": 11.0}]}, "sample_output": [{"time": 1, "x": 2.0}, {"time": 2, "x": 5.0}, {"time": 3, "x": 8.0}, {"time": 4, "x": 10.0}, {"time": 5, "x": 12.5}]}, {"id": "changing_mean", "category": "Aggregation", "name": "First element that doesn't change mean", "description": "Return index of the first element you can remove that does not change the mean of the list by more than 0.1", "plan": [{"id": "remove", "description": "remove"}, {"id": "orig", "description": "mean of the list"}, {"id": "new", "description": "change the"}, {"id": "diff", "description": "by more than 0.1"}, {"id": "first", "description": "index of the first element"}], "sample_input": {"vals": [{"id": 0, "value": 1.0}, {"id": 1, "value": 2.0}, {"id": 2, "value": 3.0}, {"id": 3, "value": 1.0}]}, "sample_output": 1}, {"id": "reachable", "category": "Graphs", "name": "Reflexive-transitive closure", "description": "A path is a sequence of edges such that the target of each edge is the source of the next. Given a graph and a vertex v, list the vertices reachable by a path from v.", "plan": [{"id": "graph", "description": "a graph"}, {"id": "source", "description": "from v"}, {"id": "edge_match", "description": "target of each edge is the source of the next"}, {"id": "edge_sequence", "description": "a sequence of edges"}, {"id": "vertices", "description": "the vertices reachable by a path"}], "sample_input": {"graph": [{"source": "a", "target": "b"}, {"source": "b", "target": "b"}, {"source": "b", "target": "c"}, {"source": "c", "target": "f"}, {"source": "c", "target": "b"}, {"source": "a", "target": "d"}, {"source": "e", "target": "a"}], "query": [{"source": "a"}]}, "sample_output": ["a", "b", "c", "d", "f"]}, {"id": "tom_hanks", "category": "Joins", "name": "Directors of movies Tom Hanks starred in", "description": "Find directors of movies that Tom Hanks starred in", "plan": [{"id": "director", "description": "Find directors"}, {"id": "actor", "description": "Tom Hanks starred in"}, {"id": "movies", "description": "of movies"}], "sample_input": {"actors": [{"movie": "AM", "actor": "Tom Hanks"}, {"movie": "AM", "actor": "Not Tom Hanks"}, {"movie": "AM", "actor": "Also not Tom Hanks"}, {"movie": "BM", "actor": "Other actor"}, {"movie": "CM", "actor": "Other actor"}], "directors": [{"director": "A", "movie": "AM"}, {"director": "A", "movie": "BM"}, {"director": "C", "movie": "CM"}]}, "sample_output": ["A"]}, {"id": "documents_with_infrequent_words", "category": "Strings", "name": "Documents with infrequent words", "description": "Find the index of documents that contain a word that appears exactly once in the corpus, where a word is a case-sensitive string of characters separated by a space.", "plan": [{"id": "word", "description": "case-sensitive string of characters separated by a space"}, {"id": "frequency", "description": "appears exactly once"}, {"id": "documents", "description": "documents that contain a word"}], "sample_input": {"documents": [{"id": 1, "text": "Hello world"}, {"id": 2, "text": "Hello friend"}, {"id": 3, "text": "friend of the world"}, {"id": 4, "text": "Hola"}]}, "sample_output": [3, 4]}, {"id": "customer_orders", "category": "Joins", "name": "Orders from California customers", "description": "Select all order ids from customers that live in California", "plan": [{"id": "order_ids", "description": "Select all order ids"}, {"id": "California", "description": "live in California"}, {"id": "customer", "description": "customers"}], "sample_input": {"customers": [{"cid": 0, "customer": "A", "location": "California"}, {"cid": 1, "customer": "B", "location": "California"}, {"cid": 2, "customer": "C", "location": "Virginia"}, {"cid": 3, "customer": "D", "location": "New York"}], "orders": [{"cid": 0, "oid": 4, "customer": "A", "orderNum": "A1"}, {"cid": 0, "oid": 5, "customer": "A", "orderNum": "A2"}, {"cid": 1, "oid": 6, "customer": "B", "orderNum": "B1"}, {"cid": 1, "oid": 7, "customer": "B", "orderNum": "B2"}, {"cid": 2, "oid": 8, "customer": "C", "orderNum": "C1"}]}, "sample_output": [4, 5, 6, 7]}, {"id": "purchased_all_food", "category": "First-order logic", "name": "People that purchased all possible items", "description": "Find all buyers that ordered every food item at least once.", "plan": [{"id": "iter", "description": "all buyers"}, {"id": "ordered", "description": "ordered"}, {"id": "all", "description": "every food item at least once"}], "sample_input": {"food": [{"id": 1, "name": "Burrito"}, {"id": 2, "name": "Sushi"}], "orders": [{"id": 1, "buyer": "Will", "food": 1}, {"id": 2, "buyer": "Scott", "food": 2}, {"id": 3, "buyer": "Scott", "food": 2}, {"id": 4, "buyer": "Will", "food": 2}]}, "sample_output": ["Will"]}, {"id": "continent_median_population", "category": "Aggregation", "name": "Median population for each continent", "description": "For each continent, return its name and the median population of its countries.", "plan": [{"id": "iter", "description": "For each continent"}, {"id": "name", "description": "its name"}, {"id": "group", "description": "of its countries"}, {"id": "agg", "description": "median population"}], "sample_input": {"countries": [{"name": "USA", "population": 328.0, "continent": "North America"}, {"name": "USA2", "population": 37.0, "continent": "North America"}, {"name": "Canada", "population": 37.0, "continent": "North America"}, {"name": "Ethiopia", "population": 109.0, "continent": "Africa"}]}, "sample_output": [{"continent": "North America", "population": 37.0}, {"continent": "Africa", "population": 109.0}]}, {"id": "rolling_average", "category": "Time Series", "name": "Rolling average", "description": "for each data point, compute average of data points within last 7 days", "plan": [{"id": "windows", "description": "each data point"}, {"id": "group", "description": "data points within last 7"}, {"id": "filter", "description": "compute average"}], "sample_input": {"data": [{"time": 20, "x": 14.5}, {"time": 3, "x": 3.0}, {"time": 1, "x": 1.0}, {"time": 9, "x": 7.0}, {"time": 10, "x": 11.0}, {"time": 11, "x": 12.0}]}, "sample_output": [{"end_time": 1, "average": 1.0}, {"end_time": 3, "average": 2.0}, {"end_time": 9, "average": 5.0}, {"end_time": 10, "average": 9.0}, {"end_time": 11, "average": 10.0}, {"end_time": 20, "average": 14.5}]}, {"id": "unique_beer_drinkers", "category": "First-order logic", "name": "People who like a unique set of beer", "description": "Find all people whose preferred set of beers is distinct from each other person's preferred set", "plan": [{"id": "collect", "description": "preferred set of beers"}, {"id": "iter", "description": "all people"}, {"id": "compare", "description": "distinct from each other person's preferred set"}], "sample_input": {"likes": [{"name": "will", "beer": "ipa"}, {"name": "will", "beer": "lager"}, {"name": "scott", "beer": "ipa"}, {"name": "scott", "beer": "stout"}, {"name": "gleb", "beer": "ipa"}, {"name": "gleb", "beer": "stout"}, {"name": "fred", "beer": "ipa"}, {"name": "fred", "beer": "lager"}, {"name": "fred", "beer": "stout"}]}, "sample_output": ["will", "fred"]}, {"id": "row_per_child", "category": "Joins", "name": "Row per family to row per child", "description": "For each family, return a row for each child containing the family ID, child ID, DOB, and height.", "plan": [{"id": "each-family", "description": "For each family"}, {"id": "each-child", "description": "for each child"}, {"id": "family-ID", "description": "family ID"}, {"id": "child-ID", "description": "child ID"}, {"id": "dob-height", "description": "DOB, and height"}], "sample_input": {"families": [{"family": 1, "dob_child1": "1998", "dob_child2": "1999", "dob_child3": "2000", "height_child1": "5_11", "height_child2": "5_10", "height_child3": "5_9"}, {"family": 2, "dob_child1": "1997", "dob_child2": "1995", "dob_child3": "1996", "height_child1": "5_3", "height_child2": "5_5", "height_child3": "5_1"}]}, "sample_output": [{"family": 1, "child": "child1", "dob": "1998", "height": "5_11"}, {"family": 1, "child": "child2", "dob": "1999", "height": "5_10"}, {"family": 1, "child": "child3", "dob": "2000", "height": "5_9"}, {"family": 2, "child": "child1", "dob": "1997", "height": "5_3"}, {"family": 2, "child": "child2", "dob": "1995", "height": "5_5"}, {"family": 2, "child": "child3", "dob": "1996", "height": "5_1"}]}, {"id": "scc", "category": "Graphs", "name": "Strongly-connected components", "description": "A path is a sequence of edges such that the target of each edge is the source of the next. Given a graph and a vertex v, list each vertex u such that there is a path from v to u and u to v.", "plan": [{"id": "graph", "description": "a graph"}, {"id": "source<->target", "description": "v to u and u to v"}, {"id": "edge_match", "description": "target of each edge is the source of the next"}, {"id": "edge_sequence", "description": "a sequence of edges"}, {"id": "vertices", "description": "a path"}], "sample_input": {"graph": [{"source": "a", "target": "b"}, {"source": "b", "target": "b"}, {"source": "b", "target": "c"}, {"source": "c", "target": "b"}, {"source": "c", "target": "a"}, {"source": "a", "target": "d"}], "query": [{"source": "c"}]}, "sample_output": ["a", "b", "c"]}]